# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: Chatbot API Deploy to Amazon ECS demo service

on:
  push:
    branches: [ "release" ]

env:
  AWS_REGION: ap-northeast-1                                      # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: minkabu-chatbot-demo-backend                    # set this to your Amazon ECR repository name
  ECS_SERVICE: minkabu-chatbot-demo-backend                       # set this to your Amazon ECS service name
  ECS_CLUSTER: dev                                                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./scripts/dev/chatbot-task-definition.json # set this to the path to your Amazon ECS task definition
                                                                  # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: minkabu-demo-backend                            # set this to the name of the container in the
                                                                  # containerDefinitions section of your task definition

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: dev

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Setup .env file
      env:
        ENVIRONMENT_TYPE: dev
        RELEASE_VERSION: "0.1.0"
        OPENAI_CHAT_MODEL: gpt-4o-mini
        OPENAI_COMPLETION_MODEL: gpt-3.5-turbo-instruct
        OPENAI_EMBEDDING_MODEL: text-embedding-3-small
        OPENROUTER_MODEL: deepseek/deepseek-chat
        OPENAI_IMAGE_MODEL: dall-e-3
        OPENAI_RETRY: 3
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_DEV }}
        PINECONE_INDEX_NAME: dev-jp-news
        PINECONE_NAMESPACE: yahoo
        PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY_DEV }}
        PINECONE_API_KEY2: ${{ secrets.PINECONE_API_KEY2_DEV }}
        PINECONE_HOST: ${{ secrets.PINECONE_HOST_DEV }}
        PINECONE_HOST2: ${{ secrets.PINECONE_HOST2_DEV }}
        RDB_HOST: ${{ secrets.RDB_RO_HOST_DEV }}
        RDB_USERNAME: ${{ secrets.RDB_USERNAME_DEV }}
        RDB_PASSWORD: ${{ secrets.RDB_PASSWORD_DEV }}
        RDB_DATABASE: kepler
        RDB_PORT: 3306
        LANGCHAIN_TRACING_V2: true
        LANGCHAIN_PROJECT: rag-chatbot
        LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY_DEV }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY_DEV }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY_DEV }}
        OPENROUTER_MODEL: deepseek/deepseek-chat
        OPENROUTER_BASE_URL: https://openrouter.ai/api/v1
        TIMEZONE: Asia/Tokyo
        QDRANT_API_KEY: ${{ secrets.QDRANT_API_KEY_DEV }}
        QDRANT_URL: ${{ secrets.QDRANT_URL_DEV }}
        MARKDOWN_SERVER_BASE_URL: https://goapi.solabdev.xyz
        SEARCH_API_URL: ${{ secrets.SEARCH_API_URL_DEV }}
      run: |
        echo -e "RDB_HOST=$RDB_HOST" >> .env
        echo -e "RDB_USERNAME=\"$RDB_USERNAME\"" >> .env
        echo -e "RDB_DATABASE=\"$RDB_DATABASE\"" >> .env
        echo -e "RDB_PASSWORD=\"$RDB_PASSWORD\"" >> .env
        echo -e "RDB_PORT=\"$RDB_PORT\"" >> .env
        echo -e "ENVIRONMENT_TYPE=$ENVIRONMENT_TYPE" >> .env
        echo -e "RELEASE_VERSION=$RELEASE_VERSION" >> .env
        echo -e "OPENAI_CHAT_MODEL=$OPENAI_CHAT_MODEL" >> .env
        echo -e "OPENAI_COMPLETION_MODEL=$OPENAI_COMPLETION_MODEL" >> .env
        echo -e "OPENAI_EMBEDDING_MODEL=$OPENAI_EMBEDDING_MODEL" >> .env
        echo -e "OPENAI_IMAGE_MODEL=$OPENAI_IMAGE_MODEL" >> .env
        echo -e "OPENAI_RETRY=$OPENAI_RETRY" >> .env
        echo -e "OPENROUTER_MODEL=$OPENROUTER_MODEL" >> .env
        echo -e "OPENAI_API_KEY=$OPENAI_API_KEY" >> .env
        echo -e "PINECONE_INDEX_NAME=$PINECONE_INDEX_NAME" >> .env
        echo -e "PINECONE_NAMESPACE=$PINECONE_NAMESPACE" >> .env
        echo -e "PINECONE_API_KEY=$PINECONE_API_KEY" >> .env
        echo -e "PINECONE_API_KEY2=$PINECONE_API_KEY2" >> .env
        echo -e "PINECONE_HOST=$PINECONE_HOST" >> .env
        echo -e "PINECONE_HOST2=$PINECONE_HOST2" >> .env
        echo -e "LANGCHAIN_TRACING_V2=$LANGCHAIN_TRACING_V2" >> .env
        echo -e "LANGCHAIN_PROJECT=$LANGCHAIN_PROJECT" >> .env
        echo -e "LANGCHAIN_API_KEY=$LANGCHAIN_API_KEY" >> .env
        echo -e "TAVILY_API_KEY=$TAVILY_API_KEY" >> .env
        echo -e "OPENROUTER_API_KEY=$OPENROUTER_API_KEY" >> .env
        echo -e "OPENROUTER_MODEL=$OPENROUTER_MODEL" >> .env
        echo -e "OPENROUTER_BASE_URL=$OPENROUTER_BASE_URL" >> .env
        echo -e "TIMEZONE=$TIMEZONE" >> .env
        echo -e "QDRANT_API_KEY=$QDRANT_API_KEY" >> .env
        echo -e "QDRANT_URL=$QDRANT_URL" >> .env
        echo -e "MARKDOWN_SERVER_BASE_URL=$MARKDOWN_SERVER_BASE_URL" >> .env
        echo -e "SEARCH_API_URL=$SEARCH_API_URL" >> .env

    - name: Check .env file
      run: |
        mv .env ./env/.dev.env
        cat ./env/.dev.env

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ENV: dev
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ./docker/$ENV.Dockerfile .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
